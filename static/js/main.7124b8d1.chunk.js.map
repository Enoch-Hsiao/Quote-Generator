{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","index","useState","quote","setQuote","author","setAuthor","getQuote","fetch","then","response","json","data","Math","floor","random","quotes","length","useEffect","twitterLink","tumblrLink","encodeURIComponent","className","id","onClick","title","target","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gLAsCeA,MAlCf,WAAgB,IAGVC,EAHS,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,KAKPC,EAAW,WAAgBC,MAAM,4IACtCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJX,EAAQY,KAAKC,MAAMD,KAAKE,SAAWH,EAAKI,OAAOC,QAC/Cb,EAASQ,EAAKI,OAAOf,GAAOE,OAC5BG,EAAUM,EAAKI,OAAOf,GAAOI,YAG/Ba,oBAAUX,EAAU,IAEpB,IAAIY,EAAc,0CAAiDhB,EAAQ,MAAQE,EAC/Ee,EAAa,gFAAiFC,mBAAmBhB,GAAQ,YAAcgB,mBAAmBlB,GAAO,uFAErK,OACE,yBAAKmB,UAAU,OACb,yBAAKA,UAAU,YAAYC,GAAG,aAC5B,yBAAKA,GAAG,QAAQpB,GAAY,6BAC5B,yBAAKoB,GAAG,UAAU,IAAMlB,GACxB,yBAAKiB,UAAU,WACf,4BAAQA,UAAY,SAAQC,GAAG,YAAYC,QAAWjB,GAAtD,aACA,uBAAGe,UAAU,gBAAgBC,GAAG,cAAcE,MAAM,8BAA8BC,OAAO,SAC/FC,KAAOR,IACD,uBAAGG,UAAU,eAAeK,KAAMP,EAAYM,OAAO,eCnBzCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.7124b8d1.chunk.js","sourcesContent":["import React, { useState ,  useEffect }from 'react';\nimport './App.css';\n\n\nfunction App() {\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  let index; \n\n  const getQuote = function get(){ fetch(\"https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\")\n  .then(response => response.json())\n  .then(data => {\n    index = Math.floor(Math.random() * data.quotes.length);\n    setQuote(data.quotes[index].quote)\n    setAuthor(data.quotes[index].author)\n  })}\n  \n  useEffect(getQuote, [])\n\n  let twitterLink = \"https://twitter.com/intent/tweet?text=\" + '\"' + quote + '\" -' + author;\n  let tumblrLink = \"https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes&caption=\" +encodeURIComponent(author)+\"&content=\" + encodeURIComponent(quote)+\"&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button\" \n  \n  return (\n    <div className=\"App\">\n      <div className=\"container\" id=\"quote-box\">\n        <div id=\"text\">{quote}</div><br/>\n        <div id=\"author\">{\"-\" + author}</div>\n        <div className=\"buttons\">\n        <button className = \"button\"id=\"new-quote\" onClick = {getQuote}>New Quote</button>\n        <a className=\"fa fa-twitter\" id=\"tweet-quote\" title=\"Post this quote on twitter!\" target=\"_blank\"\n  href= {twitterLink}></a>\n        <a className=\"fa fa-tumblr\" href={tumblrLink} target=\"_blank\"></a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}